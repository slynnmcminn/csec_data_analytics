"""
Django settings for csec_data_analytics project.
Generated by 'django-admin startproject' using Django 4.2.4.
"""
import logging
from pathlib import Path
from mongoengine import connect
from pathlib import Path
from mongoengine import connect

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '99ab1277-fe28-4013-bcde-9e5a0d200b42'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'csec_data_analytics_app',
    'rest_framework',
    'mongoengine',
    'rest_framework_mongoengine',
    'drf_spectacular',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # Ensure this is included
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Ensure this is included
    'django.contrib.messages.middleware.MessageMiddleware',  # Ensure this is included
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configure the logger
logger = logging.getLogger('django')
logger.setLevel(logging.DEBUG)

# Create a file handler and set the level to DEBUG
fh = logging.FileHandler('django_debug.log')
fh.setLevel(logging.DEBUG)

# Create a formatter and attach it to the handler
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)

# Add the handler to the logger
logger.addHandler(fh)

# MongoDB configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.dummy',  # Dummy engine for MongoDB
        'NAME': 'django-mongo',  # Replace with your actual database name
        'HOST': 'localhost',  # MongoDB host
        'PORT': 27017,  # MongoDB port
        'AUTH_MECHANISM': '',  # No authentication mechanism
    }
}

# Mongoengine configuration
_MONGODB_DATABASE_HOST = 'mongodb://localhost:27017/your_database_name'  # Replace with your actual database name
connect(host=_MONGODB_DATABASE_HOST)

# Used to generate OpenAPI schemas
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
