import openai
from django.core.management.base import BaseCommand
from pymongo import MongoClient
from csec_data_analytics_app.models import Vulnerability, VulnerabilityImpact

class Command(BaseCommand):
    help = 'Extract CVSS scores from NVD descriptions using OpenAI'

    def handle(self, *args, **kwargs):
        # Open the text file for reading
        with open(r'C:\Users\slynn\Downloads\vulnerability_descriptions.txt', 'r') as file:
            # Read the lines of the file
            lines = file.readlines()

        # Connect to your MongoDB database
        client = MongoClient('mongodb://localhost:27017')
        db = client['django-mongo']
        collection = db['vulnerability']

        # Process each description and extract features
        extracted_features_list = [self.process_description(description) for description in lines]

        # Now you have a list of extracted features corresponding to each description
        for extracted_feature, description in zip(extracted_features_list, lines):
            # Initialize a document for each extracted feature
            feature_document = {
                "description": description,  # Original NVD description
                "extracted_feature": extracted_feature,  # The extracted feature data
                "validation_status": False  # Initialize the validation status as False
            }

            # Insert the document into your MongoDB collection
            collection.insert_one(feature_document)

            # Optional: If you are using Django models for your data, you can also update the model here
            # Example: Updating a Django model
            # vulnerability = Vulnerability.objects.get(description=description)
            # vulnerability.vulnerability_impact = VulnerabilityImpact(
            #     impacts=extracted_feature,
            #     validated=False
            # )
            # vulnerability.save()

        # Close the MongoDB client
        client.close()

    def process_description(self, description):
        openai.api_key = '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'

        try:
            messages = [
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user",
                 "content": f"Extract the main features from the following vulnerability description:\n{description}"}
            ]

            response = openai.ChatCompletion.create(
                model="gpt-4-1106-preview",
                messages=messages,
                max_tokens=100
            )

            extracted_feature = response.choices[0].message['content'].strip()
            return extracted_feature
        except Exception as e:
            print(f"An error occurred: {e}")
            return None