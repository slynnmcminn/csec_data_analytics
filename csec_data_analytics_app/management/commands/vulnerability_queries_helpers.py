import re
from datetime import datetime
from csec_data_analytics_app.models import Vulnerability
def get_vulnerabilities_for_product(product_name):
    product_name_regex = re.compile(re.escape(product_name), re.IGNORECASE)
    vulnerabilities = Vulnerability.objects(vulnerable_products__product=product_name_regex)
    vulnerability_count = vulnerabilities.count()
    print(f"There are {vulnerability_count} vulnerabilities associated with the product '{product_name}' (case-insensitive search).")

def get_attack_vector_count(attack_vector):
    attack_vector_count = Vulnerability.objects(cvss_metrics__attackVector=attack_vector).count()
    print(f"There are {attack_vector_count} vulnerabilities with the attack vector '{attack_vector}'.")

from datetime import datetime, timedelta

def get_most_common_weakness_last_year():
    current_year = datetime.now().year
    last_year_start = datetime(current_year - 1, 1, 1)
    last_year_end = datetime(current_year - 1, 12, 31)

    pipeline = [
        {"$match": {
            "published_date": {"$gte": last_year_start, "$lte": last_year_end}
        }},
        {"$unwind": "$cwes"},
        {"$group": {
            "_id": "$cwes",
            "count": {"$sum": 1}
        }},
        {"$sort": {"count": -1}},
        {"$limit": 1}
    ]

    results = list(Vulnerability.objects().aggregate(*pipeline))
    if results:
        most_common_weakness = results[0]
        print(f"The most common weakness last year was '{most_common_weakness['_id']}' with {most_common_weakness['count']} occurrences.")
    else:
        print("No weaknesses found in the specified date range.")

