#vulnerability-queries.py
from datetime import datetime, timedelta
from csec_data_analytics_app.models import CVEVulnerability, CVSSMetrics, VulnerableProduct, Vulnerability, VulnerabilityImpact
import csec_data_analytics_app.utilities.vulnerability_queries as vuln_queries
import re

def get_chrome_vulnerabilities_count():
    date_120_days_ago = datetime.utcnow() - timedelta(days=120)
    return Vulnerability.objects(
        cpe_configurations__icontains="chrome",
        date_published__gte=date_120_days_ago
    ).count()

def get_vulnerabilities_for_product(product_name):
   # Count the number of vulnerabilities where the product name matches Google Chrome
   product_name_regex = re.compile(re.escape(product_name), re.IGNORECASE)
   vulnerability_count = Vulnerability.objects(vulnerable_products__product=product_name_regex).count()
   print(f"There are {vulnerability_count} vulnerabilities for {product_name} (case-insensitive search).")

def get_attack_vector_count(attack_vector):
   attack_vector_count = Vulnerability.objects(cvss_data__attackVector=attack_vector).count()
   print(f"There are {attack_vector_count} vulnerabilities with the attack vector {attack_vector}.")

def get_vulnerabilities_by_attack_vector(attack_vector):
    query = CVEVulnerability.objects(vulnerabilities__cvss_vector__icontains=attack_vector)
    results = list(query)  # Convert query set to list
    print(f"Query results for {attack_vector} vector: {results}")  # Debugging
    return len(results)  # Return the count

def get_most_common_weakness_last_year():
        pipeline = [
            {"$unwind": "$weakness"},  # Unwind the weakness array
            {"$group": {
                "_id": "$weakness.type",  # Group by weakness type
                "count": {"$sum": 1}  # Count the occurrences
            }},
            {"$sort": {"count": -1}},  # Sort by count in descending order
            {"$limit": 1}  # Limit to the most common weakness
        ]

        # Run the aggregation
        results = list(Vulnerability.objects().aggregate(*pipeline))
        # Check if any result is found and print it
        if results:
            most_common_weakness = results[0]
            print(
                f"The most common weakness is '{most_common_weakness['_id']}' with {most_common_weakness['count']} occurrences.")
        else:
            print("No weaknesses found.")


get_most_common_weakness_last_year()

def get_top_vendor_with_known_exploits_last_year():
    last_year = datetime.now().year - 1
    start_last_year = datetime(last_year, 1, 1)
    end_last_year = datetime(last_year, 12, 31)

    pipeline = [
        {"$unwind": "$vulnerabilities"},
        {"$match": {
            "vulnerabilities.knownRansomwareCampaignUse": "Known",
            "vulnerabilities.dateAdded": {"$gte": start_last_year, "$lte": end_last_year}
        }},
        {"$group": {
            "_id": "$vulnerabilities.vendorProject",
            "count": {"$sum": 1}
        }},
        {"$sort": {"count": -1}},
        {"$limit": 1}
    ]


results = list(Vulnerability.objects().aggregate(*pipeline))

for i, result in enumerate(results): print(f"{i+1}: {result['_id']['vendor']} {result['_id']['product']} has {result['count']} known exploits")

from django.core.management.base import BaseCommand

class Command(BaseCommand):
    help = 'Run queries to gather information about vulnerabilities.'

    def handle(self, *args, **kwargs):
        chrome_vulnerabilities_count = vuln_queries.get_chrome_vulnerabilities_count()
        print(f"Number of Google Chrome vulnerabilities in the past 120 days: {chrome_vulnerabilities_count}")

        top_products = vuln_queries.get_top_products_with_known_exploit(top_n=50)
        print("Top 50 products with known exploits:")
        for i, product in enumerate(top_products, start=1):
            print(f"{i}: {product['_id']['vendor']} {product['_id']['product']} has {product['count']} known exploits")

network_vulnerabilities = vuln_queries.get_vulnerabilities_by_attack_vector('NETWORK')
print(f"Number of vulnerabilities with 'NETWORK' attack vector: {network_vulnerabilities}")

physical_vulnerabilities = vuln_queries.get_vulnerabilities_by_attack_vector('PHYSICAL')
print(f"Number of vulnerabilities with 'PHYSICAL' attack vector: {physical_vulnerabilities}")

most_common_weakness = vuln_queries.get_most_common_weakness_last_year()
print(f"Most common weakness last year: {most_common_weakness}")
