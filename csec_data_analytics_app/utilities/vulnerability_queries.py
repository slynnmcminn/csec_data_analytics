from csec_data_analytics_app.models import Vulnerability, VulnerableProduct

def get_attack_vector_count(attack_vector):
   attack_vector_count = Vulnerability.objects(cvss_data__attackVector=attack_vector).count()
   print(f"There are {attack_vector_count} vulnerabilities with the attack vector {attack_vector}.")

def get_top_products_with_known_exploit(top_n):
   # Create the aggregation pipeline
   pipeline = [
       {"$unwind": "$vulnerable_products"},
       {"$match": {"known_exploit": True}},
       {"$group": {
           "_id": {
               "vendor": "$vulnerable_products.vendor",
               "product": "$vulnerable_products.product"
           },
           "count": {"$sum": 1}
       }},
       {"$sort": {"count": -1}},
       {"$limit": top_n}
   ]

   # Run the aggregation
   results = list(Vulnerability.objects().aggregate(*pipeline))

   # Print the results
   for i, result in enumerate(results):
       print(f"{i+1}: {result['_id']['vendor']} {result['_id']['product']} has {result['count']} known exploits")

def get_most_common_weakness():
   # Create the aggregation pipeline
   pipeline = [
       {"$unwind": "$weakness"},  # Unwind the weakness array
       {"$group": {
           "_id": "$weakness.type",  # Group by weakness type
           "count": {"$sum": 1}      # Count the occurrences
       }},
       {"$sort": {"count": -1}},  # Sort by count in descending order
       {"$limit": 1}              # Limit to the most common weakness
   ]

   # Run the aggregation
   results = list(Vulnerability.objects().aggregate(*pipeline))

   # Check if any result is found and print it
   if results:
       most_common_weakness = results[0]
       print(f"The most common weakness is '{most_common_weakness['_id']}' with {most_common_weakness['count']} occurrences.")
   else:
       print("No weaknesses found.")

get_most_common_weakness()

def get_vulnerabilities_for_product(product_name):
   # Count the number of vulnerabilities where the product name matches Google Chrome
   product_name_regex = re.compile(re.escape(product_name), re.IGNORECASE)
   vulnerability_count = Vulnerability.objects(vulnerable_products__product=product_name_regex).count()
   print(f"There are {vulnerability_count} vulnerabilities for {product_name} (case-insensitive search).")
