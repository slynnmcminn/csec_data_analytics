import json
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from drf_spectacular.utils import extend_schema, OpenApiParameter

from csec_data_analytics_app.serializers.serializers_vulnerability import VulnerabilitySerializer
from csec_data_analytics_app.models import Vulnerability


class VulnerabilityList(APIView):

    @extend_schema(
        responses=VulnerabilitySerializer,
        description="Get vulnerability objects from the database"
    )
    def get(self, request, *args, **kwargs):
        vulnerability_objects = Vulnerability.objects.all()
        vulnerability_serialized = VulnerabilitySerializer(vulnerability_objects, many=True)
        return_data = vulnerability_serialized.data
        return Response(return_data)

    @extend_schema(
        request=VulnerabilitySerializer,
        responses={200: str},
        description="Create a new vulnerability object"
    )
    def post(self, request):
        data = request.data
        vuln_obj = Vulnerability(
            cve_id=data['cve_id'],
            attack_vector_type=data['attack_vector_type']
        )
        vuln_obj.save()
        return Response({"message": "POST request received"}, status=status.HTTP_201_CREATED)


class VulnerabilityDetail(APIView):
    def get(self, request, cve_id):
        vulnerability_object = Vulnerability.objects(cve_id=cve_id).first()
        vulnerability_serialized = VulnerabilitySerializer(vulnerability_object)
        return_data = vulnerability_serialized.data
        return Response(return_data)

    def put(self, request, cve_id):
        # Handle PUT request
        return Response({"message": "PUT request received"}, status=status.HTTP_200_OK)

    def delete(self, request, cve_id):
        # Handle DELETE request
        return Response({"message": "DELETE request received"}, status=status.HTTP_204_NO_CONTENT)
