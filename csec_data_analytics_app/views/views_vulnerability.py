import json
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from drf_spectacular.utils import extend_schema, OpenApiParameter
from csec_data_analytics_app.serializers.serializers_vulnerability import VulnerabilitySerializer
from csec_data_analytics_app.models import CVEVulnerability, VulnerableProduct,Vulnerability, VulnerabilityImpact


class VulnerabilityList(APIView):
   @extend_schema(
       responses=VulnerabilitySerializer,
       description="Get vulnerability objects from the database"
   )
   def get(self, request, *args, **kwargs):
       vulnerability_objects = CVEVulnerability.objects.all()
       vulnerability_serialized = VulnerabilitySerializer(vulnerability_objects, many=True)
       return_data = vulnerability_serialized.data
       return Response(return_data)
   @extend_schema(
       request=VulnerabilitySerializer,
       responses=VulnerabilitySerializer,
       description="Create a new vulnerability object"
   )
   def post(self, request):
       serializer = VulnerabilitySerializer(data=request.data)
       if serializer.is_valid():
           serializer.save()
           return Response(serializer.data, status=status.HTTP_201_CREATED)
       return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class VulnerabilityDetail(APIView):
   @extend_schema(
       responses=VulnerabilitySerializer,
       description="Retrieve a vulnerability object by CVE ID"
   )
   def get(self, request, cve_id):
       try:
           vulnerability_object = CVEVulnerability.objects.get(cve_id=cve_id)
           vulnerability_serialized = VulnerabilitySerializer(vulnerability_object)
           return Response(vulnerability_serialized.data)
       except CVEVulnerability.DoesNotExist:
           return Response({"message": "Vulnerability not found"}, status=status.HTTP_404_NOT_FOUND)
   @extend_schema(
       request=VulnerabilitySerializer,
       responses=VulnerabilitySerializer,
       description="Update a vulnerability object by CVE ID"
   )
   def put(self, request, cve_id):
       try:
           vulnerability_object = CVEVulnerability.objects.get(cve_id=cve_id)
       except CVEVulnerability.DoesNotExist:
           return Response({"message": "Vulnerability not found"}, status=status.HTTP_404_NOT_FOUND)
       serializer = VulnerabilitySerializer(vulnerability_object, data=request.data)
       if serializer.is_valid():
           serializer.save()
           return Response(serializer.data)
       return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
   @extend_schema(
       responses={204: "No Content"},
       description="Delete a vulnerability object by CVE ID"
   )
   def delete(self, request, cve_id):
       try:
           vulnerability_object = CVEVulnerability.objects.get(cve_id=cve_id)
           vulnerability_object.delete()
           return Response(status=status.HTTP_204_NO_CONTENT)
       except CVEVulnerability.DoesNotExist:
           return Response({"message": "Vulnerability not found"}, status=status.HTTP_404_NOT_FOUND)
