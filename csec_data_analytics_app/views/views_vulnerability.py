import json

from drf_spectacular.utils import OpenApiParameter, extend_schema
from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView

from csec_data_analytics_app.models import Vulnerability
from csec_data_analytics_app.serializers.serializers import \
    VulnerabilityCustomSerializer
from csec_data_analytics_app.serializers.serializers_vulnerability import \
    VulnerabilitySerializer


class VulnerabilityList(APIView):
   @extend_schema(
       responses=VulnerabilitySerializer,
       description="Get vulnerability objects from the database"
   )
   def get(self, request, *args, **kwargs):
       vulnerability_objects = Vulnerability.objects.all()
       vulnerability_serialized = VulnerabilityCustomSerializer(vulnerability_objects, many=True)
       return_data = vulnerability_serialized.data
       return Response(return_data)

   @extend_schema(
       request=VulnerabilitySerializer,
       description="Create a new vulnerability object"
   )
   def post(self, request):
       serializer = VulnerabilityCustomSerializer(data=request.data)
       if serializer.is valid():
           serializer.save()
           return Response(serializer.data, status=status.HTTP_201_CREATED)
       return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class VulnerabilityDetail(APIView):

    @extend_schema(
        responses=VulnerabilitySerializer,
        description="Retrieve a vulnerability object by CVE ID"
    )
    def get(self, request, cve_id):
        try:
            vulnerability_object = Vulnerability.objects.get(cve_id=cve_id)
            vulnerability_serialized = VulnerabilityCustomSerializer(vulnerability_object)
            return Response(vulnerability_serialized.data)
        except Vulnerability.DoesNotExist:
            return Response({"message": "Vulnerability not found"}, status=status.HTTP_404_NOT_FOUND)

    @extend_schema(
        request=VulnerabilitySerializer,
        responses=VulnerabilitySerializer,
        description="Update a vulnerability object by CVE ID"
    )
    def put(self, request, cve_id):
        try:
            vulnerability_object = Vulnerability.objects.get(cve_id=cve_id)
        except Vulnerability.DoesNotExist:
            return Response({"message": "Vulnerability not found"}, status=status.HTTP_404_NOT_FOUND)

        serializer = VulnerabilityCustomSerializer(vulnerability_object, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
