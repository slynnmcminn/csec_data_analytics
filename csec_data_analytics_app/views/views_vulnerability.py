import json
from drf_spectacular.utils import OpenApiParameter, extend_schema
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.views import APIView
from .serializers.custom_serializers import CustomVulnerabilitySerializer
class VulnerabilityCreateView(generics.CreateAPIView):
    queryset = Vulnerability.objects.all()

    def get_serializer_class(self):
        # Import CustomVulnerabilitySerializer here to avoid circular import
        from .serializers.custom_serializers import CustomVulnerabilitySerializer
        return CustomVulnerabilitySerializer  # Pass the model here when creating an instance

class VulnerabilityList(APIView):
    @extend_schema(
        responses=CustomVulnerabilitySerializer,
        description="Get vulnerability objects from the database"
    )
    def get(self, request, *args, **kwargs):
        vulnerability_objects = Vulnerability.objects.all()
        vulnerability_serialized = CustomVulnerabilitySerializer(vulnerability_objects, many=True)
        return_data = vulnerability_serialized.data
        return Response(return_data)

    @extend_schema(
        request=CustomVulnerabilitySerializer,
        description="Create a new vulnerability object"
    )
    def post(self, request):
        serializer = CustomVulnerabilitySerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class VulnerabilityDetail(APIView):
    @extend_schema(
        responses=CustomVulnerabilitySerializer,
        description="Retrieve a vulnerability object by CVE ID"
    )
    def get(self, request, cve_id):
        try:
            vulnerability_object = Vulnerability.objects.get(cve_id=cve_id)
            vulnerability_serialized = CustomVulnerabilitySerializer(vulnerability_object)
            return Response(vulnerability_serialized.data)
        except Vulnerability.DoesNotExist:
            return Response({"message": "Vulnerability not found"}, status=status.HTTP_404_NOT_FOUND)

    @extend_schema(
        request=CustomVulnerabilitySerializer,
        responses=CustomVulnerabilitySerializer,
        description="Update a vulnerability object by CVE ID"
    )
    def put(self, request, cve_id):
        try:
            vulnerability_object = Vulnerability.objects.get(cve_id=cve_id)
        except Vulnerability.DoesNotExist:
            return Response({"message": "Vulnerability not found"}, status=status.HTTP_404_NOT_FOUND)

        serializer = CustomVulnerabilitySerializer(vulnerability_object, data=request.data)
        if serializer.is valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
